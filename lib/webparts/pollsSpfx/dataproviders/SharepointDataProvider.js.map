{"version":3,"sources":["webparts/pollsSpfx/dataproviders/SharepointDataProvider.ts"],"names":[],"mappings":"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","file":"webparts/pollsSpfx/dataproviders/SharepointDataProvider.js","sourcesContent":["import { IResultObject,IPollObject } from './../common/IObject';\r\nimport IDataProvider from \"./IDataprovider\";\r\nimport { IWebPartContext } from \"@microsoft/sp-webpart-base\";\r\nimport { SPHttpClientResponse, SPHttpClient, ISPHttpClientOptions } from '@microsoft/sp-http';\r\nimport { IChoiceGroupOption } from \"office-ui-fabric-react/lib/ChoiceGroup\";\r\nimport * as _ from \"lodash\";\r\n\r\n\r\nexport default class SharepointDataProvider implements IDataProvider {\r\n\r\n    private _webpartContext: IWebPartContext;\r\n\r\n    constructor(value: IWebPartContext) {\r\n        this._webpartContext = value;\r\n    }\r\n\r\n    public readsPollItemsFromList(): Promise<IPollObject[]> {\r\n        const querygetAllItems = \"https://oaktondidata.sharepoint.com/_api/Web/Lists(@v0)/Items?&@v0=guid'fac3c0ce-247d-4ec2-bc5a-594241752ba4'&$select=ID,Question,Options,Published_x0020_Date,Expiry_x0020_Date,PollCount\";\r\n\r\n        return this._webpartContext.spHttpClient.get(querygetAllItems, SPHttpClient.configurations.v1).then(\r\n            (response: any) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                }\r\n                else { return Promise.reject(new Error(JSON.stringify(response))); }\r\n            })\r\n            .then((data: any) => {\r\n                let items: IPollObject[] = [];\r\n                if (data) {\r\n                    for (let i = 0; i < data.value.length; i++) {\r\n                        //extracting the poll options from each item\r\n                        let pollOptions: IChoiceGroupOption[] = [];\r\n                        let options = data.value[i].Options.split(\"\\n\");\r\n                        if (options) {\r\n                            for (let j = 0; j < options.length; j++) {\r\n                                if (!_.isEmpty(options[j])) {\r\n                                    var pollOption: IChoiceGroupOption = {\r\n                                        key: j + \"\",\r\n                                        text: options[j]\r\n                                    };\r\n\r\n                                    pollOptions.push(pollOption);\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        var item: IPollObject = {\r\n                            Id: data.value[i].ID,\r\n                            PollQuestion: data.value[i].Question,\r\n                            PublishedDate: data.value[i].Published_x0020_Date,\r\n                            ExpiryDate: data.value[i].Expiry_x0020_Date,\r\n                            Options: pollOptions,\r\n                            CurrentPollItem: data.value[i].ID == 1 ? true : false,\r\n                            PollCount:data.value[i].PollCount\r\n                        };\r\n                        items.push(item);\r\n                    }\r\n                }\r\n\r\n                return items;\r\n            }).catch((ex) => {\r\n                console.log(\"read poll items from list error catch\", ex);\r\n                throw ex;\r\n            });\r\n\r\n    }\r\n\r\n    public submitPollResult(data: IPollObject): Promise<any> {\r\n        const querypostitemurl = \"https://oaktondidata.sharepoint.com/_api/Web/Lists(@v0)/Items?&@v0=guid'c0a6d775-96b1-44e9-a930-73fc9736e156'\";\r\n        const httpclientoptions: ISPHttpClientOptions = {\r\n            body: JSON.stringify({ Title: data.PollQuestion, Answer: data.SelectedOptionkey, QuestionID: data.Id.toString() })\r\n        };\r\n\r\n        return this._webpartContext.spHttpClient.post(querypostitemurl, SPHttpClient.configurations.v1, httpclientoptions)\r\n            .then((response: SPHttpClientResponse) => {\r\n                this.updatePollCount(data.Id,data.PollCount+1);\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.status;\r\n                }\r\n                else { return Promise.reject(new Error(JSON.stringify(response))); }\r\n            });\r\n    }\r\n\r\n    public updatePollCount(pollid:number,count:number){\r\n        const url=\"https://oaktondidata.sharepoint.com//_api/Web/Lists(@v0)/Items(@v1)?&@v0=guid'fac3c0ce-247d-4ec2-bc5a-594241752ba4'&@v1=\"+pollid;\r\n        const httpclientoptions:ISPHttpClientOptions={\r\n            body:JSON.stringify({PollCount:count})\r\n        };\r\n\r\n        httpclientoptions.headers={'IF-MATCH': '*','X-Http-Method': 'PATCH'};\r\n        \r\n        this._webpartContext.spHttpClient.post(url,SPHttpClient.configurations.v1,httpclientoptions).then((response:SPHttpClientResponse)=>{\r\n            console.log(response.status);\r\n        });\r\n        \r\n    }\r\n\r\n    public getResultsData(pollid:number,options:string[]):Promise<number[]>{\r\n        debugger;\r\n        const url=\"https://oaktondidata.sharepoint.com/_api/Web/Lists(@v0)/Items?&@v0=guid'c0a6d775-96b1-44e9-a930-73fc9736e156'&$select=Answer,QuestionID,Author/Name &$expand=Author/Id &$filter=QuestionID eq \"+pollid;\r\n\r\n        return this._webpartContext.spHttpClient.get(url,SPHttpClient.configurations.v1)\r\n        .then((response:any) =>{\r\n            if (response.status >= 200 && response.status < 300) {\r\n                return response.json();\r\n            }\r\n            else { return Promise.reject(new Error(JSON.stringify(response))); }\r\n        }).then((data:any)=>{\r\n            debugger;\r\n            let items:number[]=[];\r\n            if(data){\r\n                _.forEach(options,(value)=>{items.push(_.filter(data.value,{'Answer':value}).length);});\r\n            }\r\n            return items;\r\n        }).catch((ex) => {\r\n            console.log(\"read poll items from list error catch\", ex);\r\n            throw ex;\r\n        });\r\n    }\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}
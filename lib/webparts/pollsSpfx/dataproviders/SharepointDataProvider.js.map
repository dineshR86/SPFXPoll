{"version":3,"sources":["webparts/pollsSpfx/dataproviders/SharepointDataProvider.ts"],"names":[],"mappings":"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","file":"webparts/pollsSpfx/dataproviders/SharepointDataProvider.js","sourcesContent":["import { IResultObject, IPollObject } from './../common/IObject';\r\nimport IDataProvider from \"./IDataprovider\";\r\nimport { IWebPartContext } from \"@microsoft/sp-webpart-base\";\r\nimport { SPHttpClientResponse, SPHttpClient, ISPHttpClientOptions } from '@microsoft/sp-http';\r\nimport { IChoiceGroupOption } from \"office-ui-fabric-react/lib/ChoiceGroup\";\r\nimport * as _ from \"lodash\";\r\n\r\n\r\nexport default class SharepointDataProvider implements IDataProvider {\r\n\r\n    private _webpartContext: IWebPartContext;\r\n    private _pollsAnswered: number[];\r\n    private _currentUser: any;\r\n\r\n    constructor(value: IWebPartContext) {\r\n        console.log(\"Data provider log\");\r\n        this._webpartContext = value;\r\n\r\n    }\r\n\r\n\r\n    // for fetching the poll items from the list based on the published date and expiry date.\r\n    public readsPollItemsFromList(pollsAnswered: number[]): Promise<IPollObject[]> {\r\n        debugger;\r\n        console.log(\"Data provider read poll items function\");\r\n        let todaysDate = new Date().toISOString();\r\n        const querygetAllItems = \"https://oaktondidata.sharepoint.com/tstPoll/_api/Web/Lists/getByTitle('Poll Questions')/Items?&$select=ID,Question,Options,Published_x0020_Date,Expiry_x0020_Date,PollCount&$filter=(Expiry_x0020_Date ge datetime'\" + todaysDate + \"') and (Published_x0020_Date le datetime'\" + todaysDate + \"')\";\r\n        return this._webpartContext.spHttpClient.get(querygetAllItems, SPHttpClient.configurations.v1).then(\r\n            (response: any) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                }\r\n                else { return Promise.reject(new Error(JSON.stringify(response))); }\r\n            })\r\n            .then((data: any) => {\r\n                debugger;\r\n                let items: IPollObject[] = [];\r\n                if (data) {\r\n                    for (let i = 0; i < data.value.length; i++) {\r\n                        //extracting the poll options from each item\r\n                        let pollOptions: IChoiceGroupOption[] = [];\r\n                        let options = data.value[i].Options.split(\"\\n\");\r\n                        if (options) {\r\n                            for (let j = 0; j < options.length; j++) {\r\n                                if (!_.isEmpty(options[j])) {\r\n                                    var pollOption: IChoiceGroupOption = {\r\n                                        key: j + \"\",\r\n                                        text: options[j]\r\n                                    };\r\n\r\n                                    pollOptions.push(pollOption);\r\n                                }\r\n                            }\r\n                        }\r\n                        debugger;\r\n                        var item: IPollObject = {\r\n                            Id: data.value[i].ID,\r\n                            PollQuestion: data.value[i].Question,\r\n                            PublishedDate: data.value[i].Published_x0020_Date,\r\n                            ExpiryDate: data.value[i].Expiry_x0020_Date,\r\n                            Options: pollOptions,\r\n                            CurrentPollItem: data.value[i].ID == 1 ? true : false,\r\n                            Showresults: _.indexOf(pollsAnswered, data.value[i].ID.toString()) >= 0 ? true : false,\r\n                            PollCount: data.value[i].PollCount\r\n                        };\r\n                        items.push(item);\r\n                    }\r\n                }\r\n                return items;\r\n            }).catch((ex) => {\r\n                console.log(\"read poll items from list error catch\", ex);\r\n                throw ex;\r\n            });\r\n    }\r\n\r\n    public submitPollResult(data: IPollObject): Promise<any> {\r\n        const querypostitemurl = \"https://oaktondidata.sharepoint.com/TstPoll/_api/Web/Lists/getByTitle('Poll Questions')/Items\";\r\n        const httpclientoptions: ISPHttpClientOptions = {\r\n            body: JSON.stringify({ Title: data.PollQuestion, Answer: data.SelectedOptionkey, QuestionID: data.Id.toString() })\r\n        };\r\n\r\n        return this._webpartContext.spHttpClient.post(querypostitemurl, SPHttpClient.configurations.v1, httpclientoptions)\r\n            .then((response: SPHttpClientResponse) => {\r\n                this.updatePollCount(data.Id, data.PollCount + 1);\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.status;\r\n                }\r\n                else { return Promise.reject(new Error(JSON.stringify(response))); }\r\n            });\r\n    }\r\n\r\n    public updatePollCount(pollid: number, count: number) {\r\n        const url = \"https://oaktondidata.sharepoint.com/TstPoll/_api/Web/Lists/getByTitle('Poll Questions')/Items(@v1)?&@v1=\" + pollid;\r\n        const httpclientoptions: ISPHttpClientOptions = {\r\n            body: JSON.stringify({ PollCount: count })\r\n        };\r\n\r\n        httpclientoptions.headers = { 'IF-MATCH': '*', 'X-Http-Method': 'PATCH' };\r\n\r\n        this._webpartContext.spHttpClient.post(url, SPHttpClient.configurations.v1, httpclientoptions).then((response: SPHttpClientResponse) => {\r\n            console.log(response.status);\r\n        });\r\n\r\n    }\r\n\r\n    public getResultsData(pollid: number, options: string[]): Promise<number[]> {\r\n        //debugger;\r\n        const url = \"https://oaktondidata.sharepoint.com/TstPoll/_api/Web/Lists/getByTitle('PollLog')/Items?&$select=Answer,QuestionID,Author/Name &$expand=Author/Id &$filter=QuestionID eq \" + pollid;\r\n\r\n        return this._webpartContext.spHttpClient.get(url, SPHttpClient.configurations.v1)\r\n            .then((response: any) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                }\r\n                else { return Promise.reject(new Error(JSON.stringify(response))); }\r\n            }).then((data: any) => {\r\n                //debugger;\r\n                let items: number[] = [];\r\n                if (data) {\r\n                    _.forEach(options, (value) => { items.push(_.filter(data.value, { 'Answer': value }).length); });\r\n                }\r\n                return items;\r\n            }).catch((ex) => {\r\n                console.log(\"read poll items from list error catch\", ex);\r\n                throw ex;\r\n            });\r\n    }\r\n\r\n    //Method for fetching all the polls answered by the user.\r\n    public getPollLogByUser(userId: number): Promise<number[]> {\r\n        //debugger;\r\n        const url = \"https://oaktondidata.sharepoint.com/TstPoll/_api/Web/Lists/getByTitle('PollLog')/Items?&$select=QuestionID,Editor/Name &$expand=Editor/Id &$filter=Editor/Id eq '11'\";\r\n\r\n        return this._webpartContext.spHttpClient.get(url, SPHttpClient.configurations.v1)\r\n            .then((response: any) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                }\r\n                else { return Promise.reject(new Error(JSON.stringify(response))); }\r\n            }).then((data: any) => {\r\n                //debugger;\r\n                let items: number[] = [];\r\n                if (data) {\r\n                    _.forEach(data.value, (obj: any) => { items.push(obj.QuestionID); });\r\n                    items = _.uniq(items);\r\n                }\r\n                return items;\r\n            }).catch((ex) => {\r\n                console.log(\"read poll items from list error catch\", ex);\r\n                throw ex;\r\n            });\r\n    }\r\n\r\n    public getCurrentUser(): Promise<any> {\r\n        //debugger;\r\n        const url = \"https://oaktondidata.sharepoint.com/TstPoll/_api/Web/CurrentUser\";\r\n\r\n        return this._webpartContext.spHttpClient.get(url, SPHttpClient.configurations.v1)\r\n            .then((response: any) => {\r\n                if (response.status >= 200 && response.status < 300) {\r\n                    return response.json();\r\n                }\r\n                else { return Promise.reject(new Error(JSON.stringify(response))); }\r\n            }).then((data: any) => {\r\n                //debugger;\r\n                this._currentUser = data;\r\n                return data;\r\n            }).catch((ex) => {\r\n                console.log(\"read poll items from list error catch\", ex);\r\n                throw ex;\r\n            });\r\n    }\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}
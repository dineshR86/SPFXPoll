{"version":3,"sources":["webparts/pollsSpfx/components/PollsSpfx.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,6BAA+B;AAC/B,iEAA6C;AAG7C,sEAAyF;AACzF,4DAA4F;AAC5F,kEAAgE;AAGhE,0BAA4B;AAE5B,qCAAoC;AACpC,0DAAyD;AAEzD;IAAuC,6BAAgD;IAMrF,mBAAY,KAAsB;QAAlC,YACE,kBAAM,KAAK,CAAC,SAKb;QAJC,OAAO,CAAC,GAAG,CAAC,6BAA6B,CAAC,CAAC;QAC3C,KAAI,CAAC,KAAK,GAAG;YACX,SAAS,EAAE,EAAE;SACd,CAAC;;IACJ,CAAC;IAEM,qCAAiB,GAAxB;QAAA,iBA0CD;QAzCG,OAAO,CAAC,GAAG,CAAC,mCAAmC,CAAC,CAAC;QACjD,kDAAkD;QAClD,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,cAAc,EAAE,CAAC,IAAI,CACrD,UAAC,IAAS;YACN,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;YACpC,KAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAC5D,UAAC,SAAmB;gBAChB,OAAO,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;gBAC7C,KAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,sBAAsB,CAAC,SAAS,CAAC;qBAClE,IAAI;gBACH,SAAS;gBACT,UAAC,KAAoB;oBACnB,KAAI,CAAC,QAAQ,CAAC;wBACZ,SAAS,EAAE,KAAK;qBACjB,CAAC,CAAC;gBACL,CAAC;gBACD,QAAQ;gBACR,UAAC,IAAS;oBACR,KAAI,CAAC,QAAQ,CAAC;wBACZ,cAAc,EAAE,IAAI;wBACpB,YAAY,EAAE,IAAI;qBACnB,CAAC,CAAC;gBACL,CAAC,CACF,CAAC,KAAK,CAAC,UAAC,EAAE;oBACT,KAAI,CAAC,QAAQ,CAAC;wBACZ,cAAc,EAAE,IAAI;wBACpB,YAAY,EAAE,EAAE,CAAC,YAAY;qBAC9B,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACP,CAAC,EACD,UAAC,OAAY;gBACT,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,EAAE;gBACR,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;QACX,CAAC,EACD,UAAC,OAAY;YACT,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QACzB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,EAAE;YACZ,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACL,CAAC;IAEQ,0BAAM,GAAb;QACE,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;QACtC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;QAElF,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACrG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;QACvE,IAAI,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAE/D,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3B,iCAAiC;YACjC,MAAM,CAAC,gDAAuB,CAAC;QACjC,CAAC;QAED,MAAM,CAAC,CACL,6BAAK,SAAS,EAAE,+BAAM,CAAC,SAAS;YAC9B,6BAAK,SAAS,EAAE,+BAAM,CAAC,SAAS;gBAC9B,6BAAK,SAAS,EAAE,+BAAM,CAAC,GAAG;oBACxB,6BAAK,SAAS,EAAE,+BAAM,CAAC,MAAM;wBAC3B,yCAAe;wBACf,iCACG,QAAQ,CAAC,WAAW,GAAG;4BAAM,oBAAC,iBAAO,IAAC,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,sBAAsB,GAAI,CAAM,GAAG,oBAAC,yBAAW,IAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,YAAY,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,kBAAkB,EAAC,GAAG,GAAG,CAC/P;wBACN;4BACE,oBAAC,aAAK,IAAC,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,+BAAM,CAAC,KAAK;;gCACnB,kCAAO,QAAQ,CAAC,SAAS,CAAQ,CACrD,CACJ,CACF,CACF;gBACN,6BAAK,SAAS,EAAE,+BAAM,CAAC,GAAG;oBACxB,6BAAK,SAAS,EAAE,+BAAM,CAAC,aAAa;wBAClC,oBAAC,mBAAU,0BAAoB,MAAM,EAAC,KAAK,EAAC,eAAe,EAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,sBAAsB,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,QAAQ,EAAE,IAAI,CAAC,UAAU,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI,GAAI;wBAC1L,oBAAC,sBAAa,0BAAoB,MAAM,EAAC,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,MAAM,EAAE,QAAQ,CAAC,WAAW,EAAE,KAAK,EAAC,MAAM,EAAC,QAAQ,EAAE,QAAQ,CAAC,WAAW,aAAwB;wBACtK,oBAAC,mBAAU,0BAAoB,MAAM,EAAC,KAAK,EAAC,WAAW,EAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,8BAA8B,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,QAAQ,EAAE,IAAI,CAAC,UAAU,IAAI,CAAC,GAAG,KAAK,GAAG,IAAI,GAAI,CAC1L,CACF,CACF,CACF,CACP,CAAC;IACJ,CAAC;IAGO,6BAAS,GAAjB,UAAkB,EAAqC,EAAE,MAAW;QAClE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC;IACrC,CAAC;IAGO,gCAAY,GAApB;QADA,iBA+BC;QA7BC,sBAAsB;QACtB,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QACxC,IAAI,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3D,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC;QAChC,YAAY,CAAC,iBAAiB,GAAG,IAAI,CAAC,eAAe,CAAC;QACtD,4BAA4B;QAC5B,IAAI,CAAC,KAAK,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,YAAY,CAAC;aAC7D,IAAI,CACH,UAAC,IAAS;YACR,QAAQ,CAAC;YAET,YAAY,CAAC,SAAS,GAAG,YAAY,CAAC,SAAS,GAAG,CAAC,CAAC;YACpD,YAAY,CAAC,KAAI,CAAC,aAAa,CAAC,GAAG,YAAY,CAAC;YAChD,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC;QAC7C,CAAC,EACD,UAAC,IAAS;YACR,QAAQ,CAAC;YACT,KAAI,CAAC,QAAQ,CAAC;gBACZ,cAAc,EAAE,IAAI;gBACpB,YAAY,EAAE,IAAI;aACnB,CAAC,CAAC;QACL,CAAC,CACF,CAAC,KAAK,CAAC,UAAC,EAAE;YACT,KAAI,CAAC,QAAQ,CAAC;gBACZ,cAAc,EAAE,IAAI;gBACpB,YAAY,EAAE,EAAE,CAAC,YAAY;aAC9B,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IAEP,CAAC;IAGO,gCAAY,GAApB;QACE,sBAAsB;QACtB,WAAW;QACX,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QACxC,IAAI,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,IAAI,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3D,8CAA8C;QAC9C,YAAY,CAAC,eAAe,GAAG,IAAI,CAAC;QACpC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;QAE7C,mCAAmC;QACnC,YAAY,CAAC,eAAe,GAAG,KAAK,CAAC;QACrC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,YAAY,CAAC;QAEhD,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC;IAE7C,CAAC;IAGO,gCAAY,GAApB;QACE,sBAAsB;QACtB,WAAW;QACX,IAAI,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QACxC,IAAI,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QACxD,IAAI,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QAC3D,0CAA0C;QAC1C,YAAY,CAAC,eAAe,GAAG,IAAI,CAAC;QACpC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,YAAY,CAAC;QAE7C,mCAAmC;QACnC,YAAY,CAAC,eAAe,GAAG,KAAK,CAAC;QACrC,YAAY,CAAC,IAAI,CAAC,aAAa,CAAC,GAAG,YAAY,CAAC;QAEhD,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,CAAC,CAAC;IAC7C,CAAC;IAEM,sCAAkB,GAAzB;QACE,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;IACvC,CAAC;IA7ED;QADC,oBAAQ;8CAIR;IAGD;QADC,oBAAQ;iDA+BR;IAGD;QADC,oBAAQ;iDAiBR;IAGD;QADC,oBAAQ;iDAgBR;IAKH,gBAAC;CAlLD,AAkLC,CAlLsC,KAAK,CAAC,SAAS,GAkLrD;kBAlLoB,SAAS","file":"webparts/pollsSpfx/components/PollsSpfx.js","sourcesContent":["import * as React from 'react';\r\nimport styles from './PollsSpfx.module.scss';\r\nimport { IPollsSpfxProps } from './IPollsSpfxProps';\r\nimport { escape } from '@microsoft/sp-lodash-subset';\r\nimport { ChoiceGroup, IChoiceGroupOption } from 'office-ui-fabric-react/lib/ChoiceGroup';\r\nimport { IButtonProps, DefaultButton, IconButton } from 'office-ui-fabric-react/lib/Button';\r\nimport { autobind } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { IPollObject } from '../common/IObject';\r\nimport { IPollSpfxState } from './IPollSpfxState';\r\nimport * as _ from \"lodash\";\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport { Results } from './Results';\r\nimport { Label } from 'office-ui-fabric-react/lib/Label';\r\n\r\nexport default class PollsSpfx extends React.Component<IPollsSpfxProps, IPollSpfxState> {\r\n  private _PrevIndex: number;\r\n  private _NextIndex: number;\r\n  private _selectedOption: string;\r\n  private _currentIndex: number;\r\n\r\n  constructor(props: IPollsSpfxProps) {\r\n    super(props);\r\n    console.log(\"React component constructor\");\r\n    this.state = {\r\n      pollItems: []\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    console.log(\"React component didmount function\");\r\n    //this.props.dataProvider.readsPollItemsFromList()\r\n    this.props.sharepointdataProvider.getCurrentUser().then(\r\n      (item: any) => {\r\n          console.log(\"Fetched user details\");\r\n          this.props.sharepointdataProvider.getPollLogByUser(item.Id).then(\r\n              (pollitems: number[]) => {\r\n                  console.log(\"Fetched Poll answered details\");\r\n                  this.props.sharepointdataProvider.readsPollItemsFromList(pollitems)\r\n                  .then(\r\n                    //resolve\r\n                    (items: IPollObject[]) => {\r\n                      this.setState({\r\n                        pollItems: items\r\n                      });\r\n                    },\r\n                    //reject\r\n                    (data: any) => {\r\n                      this.setState({\r\n                        isErrorOccured: true,\r\n                        errorMessage: data\r\n                      });\r\n                    }\r\n                  ).catch((ex) => {\r\n                    this.setState({\r\n                      isErrorOccured: true,\r\n                      errorMessage: ex.errorMessage\r\n                    });\r\n                  });\r\n              },\r\n              (rejdata: any) => {\r\n                  console.log(rejdata);\r\n              }).catch((ex) => {\r\n                  console.log(ex.errorMessage);\r\n              });\r\n      },\r\n      (rejdata: any) => {\r\n          console.log(rejdata);\r\n      }).catch((ex) => {\r\n      console.log(ex.errorMessage);\r\n  });\r\n}\r\n\r\n  public render(): React.ReactElement<IPollsSpfxProps> {\r\n    console.log(\"React component render\");\r\n    this._currentIndex = _.findIndex(this.state.pollItems, { CurrentPollItem: true });\r\n\r\n    this._PrevIndex = this._currentIndex < this.state.pollItems.length - 1 ? this._currentIndex + 1 : -1;\r\n    this._NextIndex = this._currentIndex > 0 ? this._currentIndex - 1 : -1;\r\n    let pollitem = _.nth(this.state.pollItems, this._currentIndex);\r\n\r\n    if (this._currentIndex < 0) {\r\n      //TODO: Add the loading component\r\n      return <div>Loading poll</div>;\r\n    }\r\n\r\n    return (\r\n      <div className={styles.pollsSpfx}>\r\n        <div className={styles.container}>\r\n          <div className={styles.row}>\r\n            <div className={styles.column}>\r\n              <h2>Survey</h2>\r\n              <div>\r\n                {pollitem.Showresults ? <div ><Results pollobject={pollitem} dataProvider={this.props.sharepointdataProvider} /></div> : <ChoiceGroup options={pollitem.Options} label={pollitem.PollQuestion} required={false} onChange={this._onChange} defaultSelectedKey=\"A\" />}\r\n              </div>\r\n              <div>\r\n                <Label disabled={false} className={styles.label}>\r\n                  Total no of votes polled: <span>{pollitem.PollCount}</span>\r\n                </Label>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className={styles.row}>\r\n            <div className={styles.columnbuttons}>\r\n              <IconButton data-automation-id='test' title='Previous Poll' iconProps={{ iconName: 'DoubleChevronLeftMed' }} onClick={this._onPrevClick} disabled={this._PrevIndex >= 0 ? false : true} />\r\n              <DefaultButton data-automation-id='test' onClick={this._onVoteClick} hidden={pollitem.Showresults} title='Vote' disabled={pollitem.Showresults}> Vote </DefaultButton>\r\n              <IconButton data-automation-id='test' title='Next Poll' iconProps={{ iconName: 'DoubleChevronLeftMedMirrored' }} onClick={this._onNextClick} disabled={this._NextIndex >= 0 ? false : true} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onChange(ev: React.FormEvent<HTMLInputElement>, option: any) {\r\n    console.dir(option);\r\n    this._selectedOption = option.text;\r\n  }\r\n\r\n  @autobind\r\n  private _onVoteClick() {\r\n    //ev.preventDefault();\r\n    let locpollItems = this.state.pollItems;\r\n    let rendpollitem = _.nth(locpollItems, this._currentIndex);\r\n    rendpollitem.Showresults = true;\r\n    rendpollitem.SelectedOptionkey = this._selectedOption;\r\n    //submitting the poll result\r\n    this.props.sharepointdataProvider.submitPollResult(rendpollitem)\r\n      .then(\r\n        (data: any) => {\r\n          debugger;\r\n\r\n          rendpollitem.PollCount = rendpollitem.PollCount + 1;\r\n          locpollItems[this._currentIndex] = rendpollitem;\r\n          this.setState({ pollItems: locpollItems });\r\n        },\r\n        (data: any) => {\r\n          debugger;\r\n          this.setState({\r\n            isErrorOccured: true,\r\n            errorMessage: data\r\n          });\r\n        }\r\n      ).catch((ex) => {\r\n        this.setState({\r\n          isErrorOccured: true,\r\n          errorMessage: ex.errorMessage\r\n        });\r\n      });\r\n\r\n  }\r\n\r\n  @autobind\r\n  private _onPrevClick() {\r\n    //ev.preventDefault();\r\n    //debugger;\r\n    let locpollItems = this.state.pollItems;\r\n    let prevpollitem = _.nth(locpollItems, this._PrevIndex);\r\n    let rendpollitem = _.nth(locpollItems, this._currentIndex);\r\n    //setting the current poll to the previous one\r\n    prevpollitem.CurrentPollItem = true;\r\n    locpollItems[this._PrevIndex] = prevpollitem;\r\n\r\n    //setting the current poll to false\r\n    rendpollitem.CurrentPollItem = false;\r\n    locpollItems[this._currentIndex] = rendpollitem;\r\n\r\n    this.setState({ pollItems: locpollItems });\r\n\r\n  }\r\n\r\n  @autobind\r\n  private _onNextClick() {\r\n    //ev.preventDefault();\r\n    //debugger;\r\n    let locpollItems = this.state.pollItems;\r\n    let nextpollitem = _.nth(locpollItems, this._NextIndex);\r\n    let rendpollitem = _.nth(locpollItems, this._currentIndex);\r\n    //setting the current poll to the Next one\r\n    nextpollitem.CurrentPollItem = true;\r\n    locpollItems[this._NextIndex] = nextpollitem;\r\n\r\n    //setting the current poll to false\r\n    rendpollitem.CurrentPollItem = false;\r\n    locpollItems[this._currentIndex] = rendpollitem;\r\n\r\n    this.setState({ pollItems: locpollItems });\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    console.log(\"component got updated\");\r\n  }\r\n}\r\n\r\n\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}
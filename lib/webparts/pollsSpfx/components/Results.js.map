{"version":3,"sources":["webparts/pollsSpfx/components/Results.tsx"],"names":[],"mappings":"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","file":"webparts/pollsSpfx/components/Results.js","sourcesContent":["import * as React from 'react';\r\nimport { IResultProps } from \"./IResultProps\";\r\nimport { IResultState } from \"./IResultState\";\r\nimport { autobind } from 'office-ui-fabric-react/lib/Utilities';\r\nimport { HorizontalBar } from 'react-chartjs-2';\r\nimport { merge } from '@microsoft/sp-lodash-subset';\r\nimport { IResultObject } from '../common/IObject';\r\nimport * as _ from \"lodash\";\r\n//const defaults = require('react-chartjs-2').defaults;\r\nconst Chart: any = require('chart.js');\r\nconst defaults: any = Chart.defaults;\r\n\r\nexport class Results extends React.Component<IResultProps, IResultState>{\r\n  private data: { labels: any[], datasets: any[] };\r\n  private options: any;\r\n\r\n  constructor(props: IResultProps) {\r\n    super(props);\r\n    defaults.global.tooltips.mode = 'label';\r\n    defaults.global.elements.line.borderWidth = 2;\r\n    defaults.global.elements.rectangle.borderWidth = 2;\r\n    defaults.global.legend.display = true;\r\n    defaults.global.colors = [\r\n      '#97BBCD', // blue\r\n      '#DCDCDC', // light grey\r\n      '#F7464A', // red\r\n      '#46BFBD', // green\r\n      '#FDB45C', // yellow\r\n      '#949FB1', // grey\r\n      '#4D5360'  // dark grey\r\n    ];\r\n    this.state = {\r\n      results: this.data\r\n    };\r\n  }\r\n\r\n  //This event is invoked immediately after a component is mounted. \r\n  public componentDidMount(): void {\r\n    let options: any[] = [];\r\n    _.forEach(this.props.pollobject.Options, (value) => {\r\n      debugger; \r\n      if(value.text.length>20){\r\n        let optarray:string[]=[];\r\n          let sposition:number=0;\r\n          for(let i=0; i<= (value.text.length/25); i++){\r\n            optarray.push(value.text.substr(sposition,25));\r\n            sposition=sposition+25;\r\n          }\r\n          options.push(optarray);\r\n      }\r\n      else{\r\n        options.push(value.text);\r\n      }\r\n    });\r\n    this.props.dataProvider.getResultsData(this.props.pollobject.Id, options)\r\n      .then(\r\n        (items: number[]) => {\r\n          debugger;\r\n          this.data = {\r\n            labels: options,\r\n            datasets: [{\r\n              label: this.props.pollobject.PollQuestion,\r\n              data: items\r\n            }]\r\n          };\r\n          this.setState({ results: this.data });\r\n        },\r\n        (data: any) => {\r\n          this.setState({\r\n            errorMessage: data\r\n          });\r\n        }\r\n      ).catch((ex) => {\r\n        this.setState({\r\n          errorMessage: ex.errorMessage\r\n        });\r\n      });\r\n\r\n  }\r\n\r\n  //this event is fired when ever a mounted component receives new props.  \r\n  //If you need to update the state in response to prop changes (for example, to reset it), you may compare this.props and nextProps and perform state transitions using this.setState() in this method.\r\n  // React dosent call this method intially when mounting.\r\n  public componentWillReceiveProps(nextProps:IResultProps): void {\r\n    debugger;\r\n    let options: any[] = [];\r\n    let chartLabel: string = nextProps.pollobject.PollQuestion;\r\n    _.forEach(nextProps.pollobject.Options, (value) => { \r\n      if(value.text.length>25){\r\n        let optarray:string[]=[];\r\n          let sposition:number=0;\r\n          for(let i=0; i<= (value.text.length/25); i++){\r\n            optarray.push(value.text.substr(sposition,25));\r\n            sposition=sposition+25;\r\n          }\r\n          options.push(optarray);\r\n      }\r\n      else{\r\n        options.push(value.text);\r\n      }\r\n    });\r\n    this.props.dataProvider.getResultsData(nextProps.pollobject.Id, options)\r\n      .then(\r\n        (items: number[]) => {\r\n          debugger;\r\n          this.data = {\r\n            labels: options,\r\n            datasets: [{\r\n              label: chartLabel,\r\n              data: items\r\n            }]\r\n          };\r\n          this.setState({ results: this.data });\r\n        },\r\n        (data: any) => {\r\n          this.setState({\r\n            errorMessage: data\r\n          });\r\n        }\r\n      ).catch((ex) => {\r\n        this.setState({\r\n          errorMessage: ex.errorMessage\r\n        });\r\n      });\r\n\r\n  }\r\n\r\n\r\n\r\n  public render(): React.ReactElement<IResultProps> {\r\n    this.options = {\r\n      scales: {\r\n        xAxes: [{\r\n          gridLines: {\r\n            display: true\r\n          },\r\n          scaleLabel: {\r\n            display: true,\r\n            labelString: 'Number of votes'\r\n          },\r\n          ticks: {\r\n            callback: (label, index, labels) => { return label; }\r\n          }\r\n        }],\r\n        yAxes: [{\r\n          ticks: {\r\n            callback: (label: string, index, labels) => {\r\n              return label;\r\n            }\r\n          },\r\n          display: true\r\n        }]\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div>\r\n        <HorizontalBar data={this.state.results} options={this.options} />\r\n      </div>\r\n    );\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}